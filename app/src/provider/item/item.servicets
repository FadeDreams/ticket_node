
import { ItemModel, uploadDir } from "@fadedreams7org1/common";
import { Item } from "./item.model";
import { CreateItemDto, UpdateItemDto, DeleteItemDto, AddImagesDto, DeleteImagesDto } from '../dtos/item.dto'
import fs from 'fs'
import path from 'path'

export class ItemService {
  constructor(public itemModel: ItemModel) { }

  async getOneById(itemId: string) {
    return await this.itemModel.findById(itemId)
  }

  async create(createItemDto: CreateItemDto) {
    var files = createItemDto.files;
    if (!Array.isArray(files) || files.length === 0) {
      throw new Error('No files provided');
    }
    const imagePaths = files.map((file) => {
      const fileName = `your_custom_prefix_${Date.now()}_${file.originalname}`;
      fs.writeFileSync(path.join(uploadDir, fileName), file.buffer);
      return fileName;
    });
    const images = this.generateItemImages(createItemDto.files);
    const item = new this.itemModel({
      title: createItemDto.title,
      price: createItemDto.price,
      user: createItemDto.userId,
      //images: [{ src: '' }]
      images: images
    })

    return await item.save()
  }


  generateBase64Url(contentType: string, buffer: Buffer) {
    return `data:${contentType};base64,${buffer.toString('base64')}`
  }
  generateItemImages(files: CreateItemDto['files']): Array<{ src: string }> {
    let images: Array<Express.Multer.File>;

    if (typeof files === "object") {
      images = Object.values(files).flat()
    } else {
      images = files ? [...files] : []
    }

    return images.map((file: Express.Multer.File) => {
      let srcObj = { src: this.generateBase64Url(file.mimetype, file.buffer) };
      return srcObj;
    });
  }

}
export const itemService = new ItemService(Item)
